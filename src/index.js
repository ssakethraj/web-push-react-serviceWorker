import React from 'react';
import ReactDOM from 'react-dom';
import request from 'request-promise'
import path from 'path'
import 'babel-polyfill'

// import './index.css';
import App from './App';
import urlBase64ToUint8Array from './tools';
import registerServiceWorkers from './registerServiceWorker'
import { worker } from 'cluster';
var webPush = require('web-push');

ReactDOM.render(<App />, document.getElementById('root'));
registerServiceWorkers()

// Register a Service Worker.
console.log("Inside script")
let sPath = path.resolve (__dirname, 'service-worker.js')
navigator.serviceWorker.register(sPath);
console.log("I222222222nside script")
navigator.serviceWorker.ready
.then(function(registration) {
console.log("!!!!!!!!!!!")
// Use the PushManager to get the user's subscription to the push service.
return registration.pushManager.getSubscription()



.then(async function(subscription) {
    console.log("@@@@@@@@@@@@@@")
    // If a subscription was found, return it.
    if (subscription) {
    return subscription;
    }
    
    
    // Get the server's public key
    // const response = await process.env.VAPID_PUBLIC_KEY;
    let response
    await request.get('http://localhost:3001/vapidPublicKey').then(data => {
        response = data
    }).catch(e => console.log(`Error fetching pub key ${e}`))
    // const response = await fetch('/vapidPublicKey');
    const vapidPublicKey = await webPush.generateVAPIDKeys();
    console.log(vapidPublicKey)
    // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
    // urlBase64ToUint8Array() is defined in /tools.js
    console.log("############")
    const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);
    // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
    // send notifications that don't have a visible effect for the user).
    console.log('converted',convertedVapidKey)
    return registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: convertedVapidKey.publicKey
    });
});

}).then(async (subscription) => {
// Send the subscription details to the server using the Fetch API.
console.log(subscription)
console.log("%%%%%%%%%%%%%")
let options = {
    method: 'POST',
    uri: 'http://localhost:3001/register',
    headers: {
    'Content-type': 'application/json'
    },
    body: JSON.stringify({
        subscription: subscription
        })

}
await request.post(options).then(data => {
        
    }).catch(e => console.log(`Error fetching pub key ${e}`))
// fetch('/register', {
//     method: 'post',
//     headers: {
//     'Content-type': 'application/json'
//     },
//     body: JSON.stringify({
//     subscription: subscription
//     }),
// });


    document.getElementById('doIt').onclick = function() {
        // Ask the server to send the client a notification (for testing purposes, in actual
        // applications the push notification is likely going to be generated by some event
        // in the server).
        console.log("Inside Buttin click");
        console.log(subscription)
        fetch('/sendNotification', {
        method: 'post',
        headers: {
            'Content-type': 'application/json'
        },
        body: JSON.stringify({
            subscription: subscription
        }),
        });
    };



}).catch((e) => {
    console.log(`-----Error`,e);
});